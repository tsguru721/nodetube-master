extends ../layout




block content
    style.
        .editLink  {
            display: inline-block;
        }

block content
    style.
        .btn {
            border-radius: 4px;
        }

        .order-by-dropdown {
            text-align: center;
        }

        .button, .order-by-dropdown-menu {
            margin: 10px auto
        }

        .order-by-dropdown-menu {
            width: 200px;
            left: 50%;
            margin-left: -100px;
        }

        input[type=checkbox] {
            /* Double-sized Checkboxes */
            -ms-transform: scale(2); /* IE */
            -moz-transform: scale(2); /* FF */
            -webkit-transform: scale(2); /* Safari and Chrome */
            -o-transform: scale(2); /* Opera */
            padding: 10px;
        }

        .nodetube-pro {
            background: #edeeee;
            font-weight: 400;
            font-size: 13px;
            margin-left: 3px;
            padding: 8px 9px;
            display: inline-block;
            border-radius: 3px;
            transform: translateY(-2px);
        }

        .user-stats {
            text-align:center;
            margin-top:30px;
        }

        footer {
            padding-top: 30px;
        }

        /* anything below this width */
        @media (max-width: 834px) {
            .uploads {
                padding: 0px 0px !important;
            }
        }


    if isUser || isAdmin || ( user && user.role == 'moderator' )
        style.
            .uploadCard {
                margin-bottom:45px !important;
            }

    div.channel-information.container
        div.col-sm-12
            div.col-sm-4(style="margin:0 auto;text-align:center;")
                h2.fw #{channel.channelName || channel.channelUrl}
                    if channel.verified == true
                        img(src="/images/verified.jpg" width="25px" height="25px" style="margin-left:3px;margin-top:-2px;margin-right:5px;border-radius:20px;")
                    if channel.plan == 'plus'
                        span.nodetube-pro PLUS

                if channel.thumbnailUrl || channel.customThumbnail
                    if channel.customThumbnail
                        a(href=`${uploadServer}/${channel.channelUrl}/${channel.customThumbnail}`)
                            img(src=`${uploadServer}/${channel.channelUrl}/${channel.customThumbnail}` style="border-radius:5px;height:200px;max-width:300px;")
                    else
                        a(href=`${uploadServer}/${channel.channelUrl}/${channel.customThumbnail}`)
                            img(src=`${uploadServer}/${channel._id}/unique.png` style="border-radius:5px;height:200px;max-width:300px;")

                        //img(src=channel.thumbnailUrl width="120px" height="120px")

                div(style="height:10px;")
                if alreadySubbed
                    button(style="display:inherit;margin:0 auto;border-radius:3px;").fw.subscribe.btn.btn-danger Unsubscribe (#{subscriberAmount})
                else
                    button(style="display:inherit;margin:0 auto;border-radius:3px;").fw.subscribe.btn.btn-success Subscribe (#{subscriberAmount})

                // TODO: should support non logged in user where you click it and it says: please login to use this feature
                div(style="margin-top:12px")
                    // TODO: this should create a push subsciption, and it will also send a query to see if it should create a new service worker
                    div(style="display:inline-block")
                        h2.share-button.pushNotificationIcon(style="display:inline")
                            i.share-icon.fas.fa-bell(aria-hidden="true" style="cursor:pointer;font-size:25px;margin-left:0px;color:white;")
                        p.pushSubscriptions(style="margin-left:1px") #{amountOfPushSubscriptions}
                    div(style="display:inline-block")
                        h2.share-button.emailNotificationIcon(style="display:inline")
                            i.share-icon.fas.fa-envelope(aria-hidden="true" style="cursor:pointer;font-size:25px;margin-left:10px;color:white;")
                        p.emailSubscriptions(style="margin-left:10px") #{amountOfEmailSubscriptions}

                // todo: else
                // let's put an 'else' here and here and show those same buttons
                // but when you click them, it prompts you to either login, or to add your email





            div.user-stats.col-sm-8(style="")
                div.col-sm-3
                    h4.fw Uploads: #{userUploadAmount} &nbsp &nbsp
                div.col-sm-3
                    h4.fw Views : #{numberWithCommas(channel.totalViews)}
                div.col-sm-3
                    h4.fw Joined: #{joinedTimeAgo}
                if channel.receivedSubscriptions
                    div.col-sm-3
                        h4.fw(style="border-radius:5px;") Subscribers : #{channel.receivedSubscriptions.length}
                else
                    div.col-sm-3
                        h4.fw(style="border-radius:5px;") Subscribers : 0





                div.col-sm-12(style="margin-top:30px;")
                    if channel.channelDescription
                        p.fw(style="font-size:18px" id="descriptionText") #{channel.channelDescription}

                    if user && user.role == 'admin'
                        each ip in ips
                            p= ip

                    if user && ( user.role == 'admin' || user.role == 'moderator') && channel.status !== 'restricted'
                        br
                        br
                        button.delete-account.btn.btn-danger Delete Account
                        //button.delete-account.btn.btn-danger Delete Account And Ban Ip
                        if user.role == 'admin'
                            button.delete-ips.btn.btn-danger Delete All Accounts / Ips
                            br
                            br
                            form(action="/admin/users" method="POST")
                                input(type='hidden', name='_csrf', value=_csrf)
                                input(type='hidden', name='user', value=`${channel._id}`)
                                button.btn.btn-primary(name="userChangeValue" value="trustUser" type="submit" ) Trust User
                                button.btn.btn-danger(name="userChangeValue" value="untrustUser" type="submit" ) Untrust User
                                br
                                br
                                p User Trusted: #{channel.privs.autoVisibleUpload}
                                if channel.stripeCustomerId
                                    p Stripe Customer ID: #{channel.stripeCustomerId}


                    if user && ( user.role == 'admin' || user.role == 'moderator') && channel.status == 'restricted'

                        br
                        h3 ACCOUNT DELETED
                        button.undelete-account.btn.btn-warning Undelete Account
                        //button.undelete-account.btn.btn-warning Undelete Account And Unban Ip
                        if user.role == 'admin'
                            button.delete-ips.btn.btn-warning Undelete All Accounts / Unban All Ips


        div

    div(style="margin-top:80px;")
        div

    p#scrollToMe
    hr


    div.center-block.text-center

        div.dropdown(style="display:inline;margin-right:15px;")
            button.fw.btn.btn-primary.dropdown-toggle(type='button', data-toggle='dropdown' style="border-radius:5px")
                | Order By: #{orderByEnglishString} &nbsp
                span.caret

            ul.dropdown-menu.dropdown
                li
                    // TODO: could replace this
                    a(href=`/user/${channel.channelUrl}?orderBy=popular&mediaType=${media}&nav=true`) Popular
                li
                    a(href=`/user/${channel.channelUrl}?orderBy=newToOld&mediaType=${media}&nav=true`) New To Old
                li
                    a(href=`/user/${channel.channelUrl}?orderBy=oldToNew&mediaType=${media}&nav=true`) Old To New
                li
                    a(href=`/user/${channel.channelUrl}?orderBy=alphabetical&mediaType=${media}&nav=true`) Alphabetical

        div.search-upload-buttons-container.dropdown(style="display:inline;padding-right:15px;")
            button#dropdownMenu1.fw.btn.btn-primary.dropdown-toggle(type='button', data-toggle='dropdown' style="border-radius:5px;")
                | File Type: #{media.charAt(0).toUpperCase() + media.slice(1)} &nbsp
                span.caret

            ul.dropdown-menu(role='menu', aria-labelledby='dropdownMenu1')
                li(role='presentation')
                    a(href=`/user/${channelUrl}/?mediaType=all&orderBy=${orderBy}&nav=true`) All
                li(role='presentation')
                    a(href=`/user/${channelUrl}/?mediaType=video&orderBy=${orderBy}&nav=true`) Videos
                li(role='presentation')
                    a(href=`/user/${channelUrl}/?mediaType=audio&orderBy=${orderBy}&nav=true`) Audio
                li(role='presentation')
                    a(href=`/user/${channelUrl}/?mediaType=image&orderBy=${orderBy}&nav=true`) Images


        include ../viewPartials/sensitivityFilterDropdown




        include ../viewPartials/channelOverviewPagination

    //UPLOAD DISPLAY SECTION

    div.container.uploads
        each upload in channel.uploads
            div.uploadCard.col-xs-12.col-sm-6.col-md-6.col-lg-4(style="text-align:center;height:330px;margin-bottom:15px;")
                if isUser || isAdmin || ( user && user.role == 'moderator' )
                    div.editFileButtons(style="")
                        form.editLink(action="/api/upload/delete" method="POST" style="display:inline-block")
                            input(type='hidden', name='_csrf', value=_csrf)
                            input(type='hidden', name='videoId', value=upload.uniqueTag)
                            button.btn.btn-danger.delete-media Delete
                        if isUser || isAdmin || user.role == 'moderator'
                            a.editLink(href=`/user/${channel.channelUrl}/${upload.uniqueTag}/edit` style="display:inline-block")
                                button.btn.btn-primary Edit


                include ../viewPartials/uploadThumbnail

                include ../viewPartials/uploadDetails

    if channel.uploads.length > 12
        br
        include ../viewPartials/channelOverviewPagination

    include ../viewPartials/adminSensitivityButtons

    include ../viewPartials/changeSensitivityFilterJs

    include ../viewPartials/mouseOverJavascript

    if user
        script.
          var user = '#{user.channelUrl}'
    else
        script.
          var user = undefined

    include ../viewPartials/channelSubscribe




    script.
      var myTextEl = document.getElementById('descriptionText');
      myTextEl.innerHTML = Autolinker.link(myTextEl.innerHTML);

    //script(src='/js/otherNotif.js')

    script(src="/js/notificationServiceWorker.js")

    include ../mediaPlayerPartials/thing

    script.
      $(document).ready(function () {
        function getParameterByName(name, url = window.location.href) {
          name = name.replace(/[\[\]]/g, '\\$&');
          var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
            results = regex.exec(url);
          if (!results) return null;
          if (!results[2]) return '';
          return decodeURIComponent(results[2].replace(/\+/g, ' '));
        }

        var navValue = getParameterByName('nav');
        if(navValue == 'true'){
          setTimeout(function(){
            document.getElementById('scrollToMe').scrollIntoView();
          }, 10)
        }

      });

    if user
        include ../pugJavascript/emailAndPushNotifications


    if user && user.role == 'admin'
        script.
          $('.sendPushNotifs').click(function () {
            console.log('hello');
            var csrf = '#{_csrf}'

            const data = {
              _csrf: csrf,
              user: '#{user.channelUrl}',
              channel: '#{channel.channelUrl}'
            }

            $.ajax({
              type: 'POST',
              url: `/api/sendUserPushNotifs`,
              data,
              success: function (data) {
                //- console.log(data);

                // Shows undefined when at 100%


              },
              error: function (err) {
                console.log(err);
              }
            });

            })

    if user
        script.
          // pretty sure this is the register of a worker
          $('.pushNotificationIcon').click(function(){
                main();
            })
    else
        include ../pugJavascript/registerToUseFeature




    script.
      $('.delete-media').on('click', function (e) {
        e.preventDefault();
        var form = $(this).parents('form');

        swal({
          title: "WARNING",
          text: "Are you sure you want to delete this upload?",
          type: "warning",
          showCancelButton: true,
          confirmButtonColor: "#DD6B55",
          confirmButtonText: "Yes, delete it"
        }).then(function (result) {
          if (result.value == true) {
            form.submit();
          }
          console.log(result);
        })
      });

    if user && ( user.role == 'admin' || user.role == 'moderator' )
        script.
            $('.delete-account').on('click', function (e) {
                e.preventDefault();
                swal({
                    title: "WARNING",
                    text: "Are you sure you want to delete this account?",
                    type: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#DD6B55",
                    confirmButtonText: "Yes, delete it"
                }).then(function (result) {
                      if(result.value !== true){
                        return
                      }

                      var channelUrl = '#{channel.channelUrl}';
                      var csrf = '#{_csrf}';
                        // sweetalert2.js:131 SweetAlert2: Unknown parameter "closeOnConfirm"
                      // dont move browser
                      e.preventDefault();

                      //
                      var data = {
                        _csrf: csrf,
                        channelUrl
                      }

                      console.log(data);

                      $.ajax({
                        type: 'POST',
                        url: `/admin/deleteAccount`,
                        data,
                        success: function (data) {

                          console.log(data);

                          location.reload();

                        },
                        error: function (err) {
                          console.log(err);
                        }
                      });
                });
            });

    if user && ( user.role == 'admin' || user.role == 'moderator' )
        script.
          $('.undelete-account').on('click', function (e) {
            e.preventDefault();
            swal({
              title: "WARNING",
              text: "Are you sure you want to undelete this account?",
              type: "warning",
              showCancelButton: true,
              confirmButtonColor: "#DD6B55",
              confirmButtonText: "Yes, delete it"
            }).then(function (result) {
              if (result.value !== true) {
                return
              }

              var channelUrl = '#{channel.channelUrl}';
              var csrf = '#{_csrf}';
              // sweetalert2.js:131 SweetAlert2: Unknown parameter "closeOnConfirm"
              // dont move browser
              e.preventDefault();

              //
              var data = {
                _csrf: csrf,
                channelUrl
              }

              $.ajax({
                type: 'POST',
                url: `/admin/undeleteAccount`,
                data,
                success: function (data) {

                  console.log(data);

                  location.reload();

                },
                error: function (err) {
                  console.log(err);
                }
              });
            });
          });

    if user && user.role == 'admin'
        script.
          $('.delete-ips').on('click', function (e) {
            e.preventDefault();

            $.ajax({
              type: 'POST',
              url: `/admin/getUserAccounts`,
              data : {
                _csrf: '#{_csrf}',
                channelUrl: '#{channel.channelUrl}'
              },
              success: function (data) {

                // console.log(data);

                var string = '';
                for(var channelUrl of data.channelUrls){
                  string = string + ' ' + channelUrl;
                }

                var siteVisitorAmount = data.ids.length;

                swal({
                  title: "WARNING",
                  text: "Are you sure you want to delete this account?" + string + '. ' + siteVisitorAmount + ' site visitors',
                  type: "warning",
                  showCancelButton: true,
                  confirmButtonColor: "#DD6B55",
                  confirmButtonText: "Yes, delete it"
                }).then(function (result) {
                  if (result.value !== true) {
                    return
                  }

                  var channelUrl = '#{channel.channelUrl}'
                  var csrf = '#{_csrf}'
                  // sweetalert2.js:131 SweetAlert2: Unknown parameter "closeOnConfirm"
                  // dont move browser
                  e.preventDefault();

                  //
                  var data = {
                    _csrf: csrf,
                    channelUrl
                  }

                  console.log(data);

                  $.ajax({
                    type: 'POST',
                    url: `/admin/deleteAllUsersAndBlockIps`,
                    data,
                    success: function (data) {

                      console.log(data);

                      location.reload();

                    },
                    error: function (err) {
                      console.log(err);
                    }
                  });
                });

                console.log(data);

              },
              error: function (err) {
                console.log(err);
              }
            });


          });

block extra_js
  script(src="https://cdnjs.cloudflare.com/ajax/libs/autolinker/1.4.4/Autolinker.js")

