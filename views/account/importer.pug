extends ../layout

block content
    style.
        .dropdown {
            text-align: center;
        }

        .button, .dropdown-menu {
            margin: 10px auto
        }

        .dropdown-menu {
            width: 200px;
            left: 50%;
            margin-left: -100px;
        }

        input[type=checkbox] {
            /* Double-sized Checkboxes */
            -ms-transform: scale(2); /* IE */
            -moz-transform: scale(2); /* FF */
            -webkit-transform: scale(2); /* Safari and Chrome */
            -o-transform: scale(2); /* Opera */
            padding: 10px;
        }

        .ldBar-label {
            font-size: 2.1em;
            font-weight: 300;
        }

        .ldBar {
            margin: 0 auto;
        }

        .upload-information p, .formats p {
            font-weight:300;
            font-size:17px;
        }

    br
    div.center-block.text-center
        div.upload-information(style="margin-top:20px")
            h1(style="display:inline")
                i.fa.fa-upload(style="display:inline")
            h1.fw(style="display:inline") File Importer

            br
            h3.fw(style="font-size:22px") #{brandName} supports importing video from over 1000 sites
            div.formats(style="max-width:500px;margin:0 auto;")
                p(style="font-size:20px;margin-bottom:16px;display:inline;") You can click&nbsp
                a(href="https://ytdl-org.github.io/youtube-dl/supportedsites.html" target="_blank" style="font-size:20px;margin-bottom:16px;display:inline;") here
                p(style="font-size:20px;margin-bottom:16px;display:inline;") &nbspfor an entire list
            h4.fw(style="margin-top:34px;font-size:20px;") There is also a general extractor that will attempt to import video from any site you input
            br
            br



            //p(style="font-size:18px;margin-bottom: 10px;") You can currently use this because you have Plus


        .row
            .col-sm-12

                input#sendPushNotifications(type='checkbox' name='sendPushNotifications')
                label.fw(for='sendPushNotifications' style="margin-left:10px;")  Send Push Notifications
                br
                input#sendEmailNotifications(type='checkbox' name='sendEmailNotifications')
                label.fw(for='sendEmailNotifications' style="margin-left:10px;")  Send Email Notifications
                br
                br


                div.importerButton
                    label.fw(style="font-size: 23px;" for='title') Url To Import
                    input.importInput.form-group.center-block.text-center(style="width:400px;max-width:95%;border-radius:2px;font-size:20px;font-weight:300;" type="text" name="title" id="title" minlength=3, maxlength=100 required)
                    button.fw.btn.btn-primary.submit-button(style="border-radius:5px;font-size:18px;" type="submit") Import

                div.importingText(style="display:none;")
                    h1.
                        Importing, will redirect you in a second....
                    img(src="/images/uploading.gif" style="height:94px;margin-top:22px;")



    script.


        $(document).ready(function(){

          // no need to autofocus
          $('.importInput').focus();

            // TODO: can use this to capture the enter button for the importer
            //$(".search-query-input").on('keyup', function (e) {
            //if (e.key === 'Enter' || e.keyCode === 13) {
            //  var userSearchQuery = $('.search-query-input').val()
            //
            //  window.location = '/search?orderBy=' + orderBy + '&mediaType=' + mediaType + '&searchQuery=' + userSearchQuery + '&searchType=' + searchType
            //  // Do something
            //}
            //});



          $('.submit-button').click(function () {

            $('.importerButton').hide();

            $('.importingText').show();

            var sendPushNotifications = $('#sendPushNotifications').is(':checked');

            var sendEmailNotifications = $('#sendEmailNotifications').is(':checked');

            var csrf = '#{_csrf}'

            var data = {
              _csrf: csrf,
              sendPushNotifications,
              sendEmailNotifications
            }

            var youtubeLink = $('.importInput').val()

            data.youtubeLink = youtubeLink;

            console.log(youtubeLink);

            if(youtubeLink){
              $.ajax({
                type: 'POST',
                url: `/importer`,
                data,
                success: function (response) {

                  console.log('response');
                  console.log(response);


                  var channelUrl = response.channelUrl;

                  var uniqueTag = response.uniqueTag;

                  console.log(uniqueTag);


                  if (uniqueTag.uniqueTag == 'alreadyUploaded') {
                    $('.importerButton').show();

                    $('.importingText').hide();

                    return swal('Sorry you\'ve already uploaded that');
                  }


                  if(uniqueTag.uniqueTag == 'error'){
                    $('.importerButton').show();

                    $('.importingText').hide();

                    return swal('Sorry that upload URL didn\'t work');
                  }



                  // alert(data);





                  // TODO: setInterval here checking the backend

                  console.log(uniqueTag)

                  // clear the old import value
                  $('.importInput').val('');

                  // no need to autofocus
                  $('.importInput').focus();


                  if(uniqueTag !== 'playlist'){

                    var newUrl = '/user/' + channelUrl + '/' + uniqueTag.uniqueTag + '?u=t'

                    // redirect instead of opening a new tab, more reliable
                    window.location.href = newUrl;

                    // window.open(newUrl);
                  } else {
                    $('.importerButton').show();

                    $('.importingText').hide();
                    return swal('Sorry playlists arent supported at the moment')
                  }


                },
                error: function (err) {
                  console.log(err);
                }
              });

            }

          })
        })
