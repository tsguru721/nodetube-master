extends ../layout

block content

  style.
    .lead-header {
      color: #444444;
      font-size: 30px;
    }

    .tagline-header {
      color: #777777;
      font-size: 10px;
      margin-bottom: 30px;
    }

    .help {
      color: #888888;
    }

  div.container(style="text-align:center")

    .row
      .col-md-4
        div(style="z-index: 1; pointer-events: none; position: absolute; width: 100%")
          h1.lead-header.fw Introducing #{brandName}
          h2.tagline-header.fw An open-source YouTube alternative powered by Node.js
          p.help
            i Move around to explore

      .col
        div#container(style="position: absolute; top: 0")
          each upload in uploads
            if upload.uploader
              div.upload(style="text-align: center")
                include ../viewPartials/uploadThumbnail

    script.
      var container = document.getElementById("container");
      container.hidden = true;

  script(type="module").

    import * as THREE from '/js/three.js/three.module.js';
    import { TWEEN } from '/js/three.js/tween.module.min.js';
    import { TrackballControls } from '/js/three.js/TrackballControls.js';
    import { CSS3DRenderer, CSS3DObject } from '/js/three.js/CSS3DRenderer.js';

    var uploads = document.getElementsByClassName("upload");
    var container = document.getElementById("container");

    var camera, scene, renderer;
    var controls;
    
    var objects = [];
    var targets = {helix: [], grid: [], sphere: []};

    var x = 0, maxZ = Number.MIN_SAFE_INTEGER;

    init();
    animate();
    // change(); // the thumbnails layout will change every 10 seconds
    // take camera outside the sphere
    setTimeout(function() {
      new TWEEN.Tween(camera.position)
        .to({x: camera.position.x, y: camera.position.y, z: (maxZ * 1.5)}, 1000)
        .easing(TWEEN.Easing.Exponential.InOut)
        .start();
    }, 3000);

    function init() {

      camera = new THREE.PerspectiveCamera(40, window.innerWidth / window.innerHeight, 1, 10000);
      camera.position.z = 1;

      scene = new THREE.Scene();

      for(var i = 0; i < uploads.length; i++) {

        var object = new CSS3DObject(uploads[i]);
        object.position.x = Math.random() * 4000 - 2000;
        object.position.y = Math.random() * 4000 - 2000;
        object.position.z = Math.random() * 4000 - 2000;
        scene.add(object);

        objects.push(object);

        // grid

        var object = new THREE.Object3D();
        object.position.x = ((i % 5) * 400) - 800;
        object.position.y = (-(Math.floor(i / 5) % 5) * 400) + 200;
        object.position.z = (Math.floor(i / 25)) * 1000 - 2000;

        targets.grid.push(object);

        // helix 

        var theta = i * 0.175 + Math.PI;
        var y = - ( i * 8 ) + 450;
        
        var object = new THREE.Object3D();
        
        object.position.setFromCylindricalCoords( 2500, theta, y );

        var vector = new THREE.Vector3();
        
        vector.x = object.position.x * 2;
        vector.y = object.position.y;
        vector.z = object.position.z * 2;
        
        object.lookAt(vector);
        
        targets.helix.push( object );

        // sphere

        var l = uploads.length;

        var phi = Math.acos( - 1 + ( 2 * i ) / l );
        var theta = Math.sqrt( l * Math.PI ) * phi;
        
        var object = new THREE.Object3D();
        
        object.position.setFromSphericalCoords( 800, phi, theta );

        var vector = new THREE.Vector3();
        
        vector.copy( object.position ).multiplyScalar( 2 );

        vector.z > maxZ ? maxZ = vector.z : 
        
        object.lookAt( vector );

        targets.sphere.push( object );
      }

      // 3D renderer
      renderer = new CSS3DRenderer();
      renderer.setSize(window.innerWidth, window.innerHeight);
      container.hidden = false;
      container.appendChild(renderer.domElement);

      // camera controls
      controls = new TrackballControls(camera, renderer.domElement);
      controls.minDistance = 500;
      controls.maxDistance = 6000;
      controls.addEventListener('change', render);

      transform(targets.sphere, 2000);

      window.addEventListener('resize', onWindowResize, false);
    }

    function transform(targets, duration) {
      
      TWEEN.removeAll();

      for (var i = 0; i < objects.length; i ++) {

        var object = objects[i];
        var target = targets[i];

        new TWEEN.Tween(object.position)
          .to({ x: target.position.x, y: target.position.y, z: target.position.z }, Math.random() * duration + duration)
          .easing(TWEEN.Easing.Exponential.InOut)
          .start();

        new TWEEN.Tween(object.rotation)
          .to({ x: target.rotation.x, y: target.rotation.y, z: target.rotation.z }, Math.random() * duration + duration)
          .easing(TWEEN.Easing.Exponential.InOut)
          .start();
      }

      new TWEEN.Tween(this)
        .to({}, duration * 2)
        .onUpdate(render)
        .start();
    }

    function onWindowResize() {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();

      renderer.setSize(window.innerWidth, window.innerHeight);

      render();
    }

    function animate() {
      requestAnimationFrame(animate);
      TWEEN.update();
      controls.update();
    }

    function render() {
      renderer.render(scene, camera);
    }

    function change() {
      if(x == 0)
        transform(targets.helix, 2000);
      else if(x == 1)
        transform(targets.grid, 2000);
      else
        transform(targets.sphere, 2000);
      x++;
      if(x == 3)
        x = 0
      setTimeout(change, 10000);
    }